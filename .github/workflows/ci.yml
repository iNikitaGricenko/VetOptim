name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Build, test, and package the services
  build:
    runs-on: ubuntu-latest
    services:
      mysql-appointment:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db_appointment
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3307:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      mysql-owner:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db_owner
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3308:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres-pet:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db_pet
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres-task:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db_task
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install --file pom.xml

      - name: Wait for MySQL and PostgreSQL services to be healthy
        run: |
          until mysqladmin ping --host=localhost --port=3307 --silent; do sleep 1; done
          until mysqladmin ping --host=localhost --port=3308 --silent; do sleep 1; done
          until pg_isready -h localhost -p 5433; do sleep 1; done
          until pg_isready -h localhost -p 5432; do sleep 1; done
          until rabbitmq-diagnostics -q ping --node rabbit@localhost; do sleep 1; done

      - name: Run Unit and Integration Tests
        run: mvn test --file pom.xml

      - name: Generate Code Coverage Report
        run: mvn jacoco:report

      - name: Upload Test Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage
          path: target/site/jacoco/index.html

  # Docker build and push
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Images
        run: |
          docker build -t vetoptim/appointment-service ./appointment-service
          docker build -t vetoptim/owner-service ./owner-service
          docker build -t vetoptim/pet-management-service ./pet-management-service
          docker build -t vetoptim/task-resource-service ./task-resource-service

      - name: Push Docker Images to Docker Hub
        run: |
          docker push vetoptim/appointment-service
          docker push vetoptim/owner-service
          docker push vetoptim/pet-management-service
          docker push vetoptim/task-resource-service

#  # Deployment job (if applicable)
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy to Kubernetes or Server
#        run: |
#          echo "Deployment logic goes here"